#summary How a visitor travels through the entity object network

= Introduction =

Some information is propagated through the pPOD object tree. The hierarchy is as follows:

  * `Study -> OTUSet`
  * `OTUSet -> OTU`, `CharacterStateMatrix`, `TreeSet`
  * `CharacterStateMatrix -> Character`, `CharacterStateRow`
  * `CharacterStateRow -> CharacterStateCell`
  * `TreeSet -> Tree`
  * An `Attachment` can be attached to any `PPodEntity`

For `MolecularStateMatrix`s, this is a little awkward since `MolecularCharacter`s are shared between matrices. If necessary, checks must be put in place in new `IVisitor`s to avoid processing `MolecularCharacter`s multiple times.

= pPOD Version Number =

These were created to enable quick notification to a client of changes in a pPOD database and to record when changes occur. The idea is that if you update an object, a new version number will get assigned up the chain of ownership. So, for example, modifying a cell in a matrix will cause the matrix, OTUSet, and Study all to get a new version number.  
 
  * `Attachment -> whatever they're attached to`
  * `CharacterState -> Character`
  * `Character -> CharacterStateMatrix`

  * `CharacterStateCell -> CharacterStateRow, CharacterStateMatrix.getColumnPPodVersionInfos()`
  * `CharacterStateRow -> CharacterStateMatrix`

  * `CharacterStateMatrix` -> `OTUSet`

  * `OTU -> OTUSet`
 
  * `Tree -> TreeSet`
  * `TreeSet -> OTUSet`

  * `OTUSet -> Study`
 
 

= pPOD Visitor =

The `accept` method on the pPOD entities follows the pattern of the pPOD version number propagation, but travels in the opposite direction: it goes from `Study` downward.

  * `Study -> OTUSet`

  * `OTUSet -> OTU, CharacterStateMatrix, TreeSet`

  * `CharacterStateMatrix -> CharacterStateRow`
  * `CharacterStateRow -> CharacterStateCell`

  * `TreeSet -> Tree`

  * `PPodEntity -> Attachment`

[http://upload.wikimedia.org/wikipedia/en/4/4a/Professor_Challenger.jpg]